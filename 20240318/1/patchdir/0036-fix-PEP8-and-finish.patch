From fde6dba6424f6802ad598f5adcbd81a52a07b8a6 Mon Sep 17 00:00:00 2001
From: Viktor Mogilenets <mogilinez17@yandex.ru>
Date: Tue, 19 Mar 2024 01:20:07 +0300
Subject: [PATCH 36/36] fix PEP8 and finish

---
 20240318/1/client.py | 56 +++++++++++++++++++++-----------------------
 20240318/1/entity.py |  2 +-
 20240318/1/logic.py  | 11 ++++++---
 20240318/1/server.py | 18 +++++++-------
 4 files changed, 46 insertions(+), 41 deletions(-)

diff --git a/20240318/1/client.py b/20240318/1/client.py
index 884f43f..f91cde8 100644
--- a/20240318/1/client.py
+++ b/20240318/1/client.py
@@ -1,17 +1,11 @@
 import cmd
 import shlex
 import socket
-import readline
 
 import exeptions
 from entity import Print_Monster
 
 
-def msg_sendreciever(client, socket):
-    while response := socket.recv(1024).rstrip().decode():
-        print(f"\n{response}\n{client.prompt}{readline.get_line_buffer()}", end="", flush=True)
-
-
 class CMD_Game(cmd.Cmd):
 
     def __init__(self,
@@ -38,14 +32,12 @@ class CMD_Game(cmd.Cmd):
         if len(response) > 1:
             name, hellow = shlex.split(response[1])
             print(Print_Monster(name, hellow))
-        
 
     def do_left(self, args):
         if args:
             print('Invalid command')
             return
         self.print_pos('left')
-        
 
     def do_right(self, args):
         if args:
@@ -75,7 +67,7 @@ class CMD_Game(cmd.Cmd):
                 raise exeptions.IncorectArgument
             while i < len(args):
                 match args[i]:
-                    case 'name' | 'hello'| 'hp':
+                    case 'name' | 'hello' | 'hp':
                         monster[args[i]] = args[i+1]
                         i += 2
                     case 'coords':
@@ -92,19 +84,28 @@ class CMD_Game(cmd.Cmd):
         except IndexError:
             print('Invalid arguments')
             return
-        monster['hello'] =  '"' + monster['hello'] + '"'
+        monster['hello'] = '"' + monster['hello'] + '"'
         self.socket.sendall(
-            f"addmon {monster['name']} {monster['coords'][0]} {monster['coords'][1]} {monster['hello']} {monster['hp']}\n".encode())
-        
+            (
+                f"addmon {monster['name']} {monster['coords'][0]}"
+                f"{monster['coords'][1]} {monster['hello']}"
+                f"{monster['hp']}\n"
+            ).encode()
+        )
+
         response = self.socket.recv(1024).rstrip().decode()
-        
+
         if response == '0':
-            print(f'Added monster {monster["name"]} to '
-            f'{monster["coords"]} saying {monster["hello"]}') 
+            print(
+                f'Added monster {monster["name"]} to '
+                f'{monster["coords"]} saying {monster["hello"]}'
+            )
         elif response == '1':
-            print(f'Added monster {monster["name"]} to'
-            f'{monster["coords"]} saying {monster["hello"]}'
-            '\nReplaced the old monster')
+            print(
+                f'Added monster {monster["name"]} to'
+                f'{monster["coords"]} saying {monster["hello"]}'
+                '\nReplaced the old monster'
+            )
         elif response == '2':
             print('Cannot add unknown monster')
 
@@ -114,21 +115,22 @@ class CMD_Game(cmd.Cmd):
 
     def do_attack(self, args):
         res = 'Attacked {name}, damage {dmg} hp'
-        
+
         args = shlex.split(args)
         if not args or len(args) not in [1, 3]:
             print('Invalid arguments')
             return
-        
+
         name, args = args[0], args[1:]
         if args and (args[0] != 'with' or len(args) != 2):
             print('Invalid arguments')
             return
-        
-        
-        self.socket.sendall(f'attack {name} { args[1] if args else "sword"}\n'.encode())
+
+        self.socket.sendall(
+            f'attack {name} { args[1] if args else "sword"}\n'.encode()
+        )
         state, *dmg = shlex.split(self.socket.recv(1024).rstrip().decode())
-        
+
         if state == '0':
             print(res.format(name=name, dmg=dmg[0]))
             print(f'{name} now has {dmg[1]}')
@@ -150,7 +152,7 @@ class CMD_Game(cmd.Cmd):
                 if c.startswith(text)
             ]
         return [c for c in self.game.name_of_monster if c.startswith(text)]
-    
+
     def do_EOF(self, args):
         return True
 
@@ -163,8 +165,4 @@ if __name__ == '__main__':
     port = 1337
     with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
         s.connect((host, port))
-        # s.sendall(f'register {sys.argv[1]}\n'.encode())
-        # response = s.recv(1024).rstrip().decode()
-            # print(response[2:])
         cli = CMD_Game(s).cmdloop()
-
diff --git a/20240318/1/entity.py b/20240318/1/entity.py
index d8d3e44..596ed58 100644
--- a/20240318/1/entity.py
+++ b/20240318/1/entity.py
@@ -68,7 +68,7 @@ class Print_Monster:
         if (name not in list_cows()) and (name not in cows.cow_dict):
             raise exeptions.UnknownMonster
         self.name = name
-    
+
     def __str__(self) -> str:
         try:
             return cowsay(message=self.hellow, cow=self.name)
diff --git a/20240318/1/logic.py b/20240318/1/logic.py
index c3c83e5..3b00b18 100644
--- a/20240318/1/logic.py
+++ b/20240318/1/logic.py
@@ -63,17 +63,22 @@ class Game:
         weapon = self.player.attack_with(weapon)
         dmg = monster.healing(weapon.damage)
 
-        if  not monster:
+        if not monster:
             self.map.set_evant(play_pos, None)
             raise exeptions.MonsterRIP(dmg=dmg, name=monster.name)
         return dmg, monster.name, monster.hp
 
-    def go_to(self, orientation: str) -> tuple[tuple[int, int], str| None, str | None]:
+    def go_to(
+        self,
+        orientation: str
+    ) -> tuple[tuple[int, int], str | None, str | None]:
+
         self.player.move(orientation)
         pos = self.player.position
         res = (pos,)
         if self.map.is_evant(pos):
-            res += ((self.map.get_evant(pos).name, self.map.get_evant(pos).hellow))
+            res += (
+                (self.map.get_evant(pos).name, self.map.get_evant(pos).hellow))
         else:
             res += (None, None)
         return res
diff --git a/20240318/1/server.py b/20240318/1/server.py
index 646c172..c504b97 100644
--- a/20240318/1/server.py
+++ b/20240318/1/server.py
@@ -4,19 +4,21 @@ import shlex
 from logic import Game, Map, Player
 import exeptions
 
+
 class Server:
     def __init__(self) -> None:
         self.game = Game(Map(), Player())
-    
+
     async def _client(self, reader, writer):
         while data := await reader.readline():
             comand = shlex.split(data.decode())
             match comand:
                 case ['cows']:
                     writer.write(str(self.game.name_of_monster).encode())
-                
+
                 case ['invent']:
-                    writer.write(str(list(self.game.player.inventory.keys())).encode())
+                    writer.write(
+                        str(list(self.game.player.inventory.keys())).encode())
 
                 case ['left' | 'right' | 'up' | 'down']:
                     res = self.game.go_to(comand[0])
@@ -38,7 +40,7 @@ class Server:
                     except exeptions.ReplaseMonster:
                         ans = '1'
                     writer.write(ans.encode())
-                
+
                 case ['attack', *args]:
                     name, weapon = args[0], args[1]
                     try:
@@ -52,24 +54,24 @@ class Server:
                         writer.write('2'.encode())
                         continue
                     except exeptions.NONamedMonster:
-                        writer.write(f'3'.encode())
+                        writer.write('3'.encode())
                         continue
                     except exeptions.NOWepon:
                         writer.write('4'.encode())
                         continue
 
                     writer.write(f'0 {dmg[0]} {dmg[2]}'.encode())
-            
-            
+
         writer.close()
         await writer.wait_closed()
 
     def new_client(self):
         return self._client
 
+
 async def main():
     server = await asyncio.start_server(Server().new_client(), '0.0.0.0', 1337)
     async with server:
         await server.serve_forever()
 
-asyncio.run(main())
\ No newline at end of file
+asyncio.run(main())
-- 
2.44.0

